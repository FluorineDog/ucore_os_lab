0
00:00:00,000 --> 00:00:15,880


1
00:00:15,920 --> 00:00:16,960
那我们前面对这个

2
00:00:17,000 --> 00:00:17,960
uCore文件系统结构

3
00:00:18,000 --> 00:00:19,520
有一个大致的了解

4
00:00:19,560 --> 00:00:21,520
接下来我们再进一步深入一下

5
00:00:21,560 --> 00:00:22,800
看看一个具体文件系统

6
00:00:22,840 --> 00:00:26,760
是怎么能够表示出它所需要那些文件

7
00:00:26,800 --> 00:00:29,440
和给用户访问的一些操作的

8
00:00:29,480 --> 00:00:33,280
就是simple file system一个分析

9
00:00:33,320 --> 00:00:34,760
在simple file system里面呢

10
00:00:34,800 --> 00:00:37,000
我们重点关注是一个一般的文件

11
00:00:37,040 --> 00:00:40,400
就是我们说通常的打开 读 写 关闭

12
00:00:40,440 --> 00:00:42,760
这么一个操作用到的文件和目录

13
00:00:42,800 --> 00:00:45,760
它的一个类型所需要涉及到

14
00:00:45,800 --> 00:00:47,280
一些数据结构和操作

15
00:00:47,320 --> 00:00:49,720
这里面需要考虑一系列问题

16
00:00:49,760 --> 00:00:52,040
第一个就是说硬盘上

17
00:00:52,080 --> 00:00:54,160
怎么有效去组织一个文件系统

18
00:00:54,200 --> 00:00:55,320
怎么能够通过文件系统组织

19
00:00:55,360 --> 00:00:58,440
来表示出更具体的文件

20
00:00:58,480 --> 00:01:00,120
硬盘的布局是什么

21
00:01:00,160 --> 00:01:02,200
硬盘上它是以磁盘块为单位

22
00:01:02,240 --> 00:01:04,480
来进行读或者写操作

23
00:01:04,520 --> 00:01:06,680
那怎么去和我们文件的

24
00:01:06,720 --> 00:01:08,760
数据块进行对应

25
00:01:08,800 --> 00:01:12,040
如何去管理这些空闲的磁盘块

26
00:01:12,080 --> 00:01:14,520
怎么去表示一个文件或者目录

27
00:01:14,560 --> 00:01:16,280
到底文件里面包含什么东西

28
00:01:16,320 --> 00:01:17,400
目录包含什么东西

29
00:01:17,440 --> 00:01:21,280
还有这个数据怎么去定位

30
00:01:21,320 --> 00:01:23,040
这些问题就是要

31
00:01:23,080 --> 00:01:24,080
设计一个文件系统里面

32
00:01:24,120 --> 00:01:25,520
需要去考虑的内容

33
00:01:25,560 --> 00:01:27,640
好 我们这里面采取的方法是什么呢

34
00:01:27,680 --> 00:01:30,200
自下而上 从硬盘到内存

35
00:01:30,240 --> 00:01:31,720
观察这个数据结构

36
00:01:31,760 --> 00:01:33,000
它们之间依赖关系

37
00:01:33,040 --> 00:01:34,760
谁包含谁 这么一个方法

38
00:01:34,800 --> 00:01:37,000
来分析我们simple file system

39
00:01:37,040 --> 00:01:40,800
它大致是怎么来组成的

40
00:01:40,840 --> 00:01:42,080
那我们可以看看这幅图

41
00:01:42,120 --> 00:01:43,160
首先我们可以定位一下

42
00:01:43,200 --> 00:01:44,040
simple file system呢

43
00:01:44,080 --> 00:01:46,560
在整个文件系统的这部分 

44
00:01:46,600 --> 00:01:47,400
中间这部分

45
00:01:47,440 --> 00:01:49,320
它的主要的内容是

46
00:01:49,360 --> 00:01:50,720
存在我们硬盘上的

47
00:01:50,760 --> 00:01:52,280
就是这一块

48
00:01:52,320 --> 00:01:54,200
整个我们提供虚拟硬盘

49
00:01:54,240 --> 00:01:56,080
这个硬盘呢 它保存了

50
00:01:56,120 --> 00:01:58,600
simple file system整体的一个结构

51
00:01:58,640 --> 00:02:00,920
这里面包含了super block

52
00:02:00,960 --> 00:02:02,440
根目录的inode

53
00:02:02,480 --> 00:02:04,400
freemap 就是表明当前

54
00:02:04,440 --> 00:02:06,080
哪些磁盘块是空闲的

55
00:02:06,120 --> 00:02:08,040
还有一些跟数据相关的

56
00:02:08,080 --> 00:02:11,560
数据块的一些信息

57
00:02:11,600 --> 00:02:13,520
那simple file system当它在内存中

58
00:02:13,560 --> 00:02:16,000
被uCore操作系统进行操作和管理的时候

59
00:02:16,040 --> 00:02:19,840
它会涉及到file 目录 

60
00:02:19,880 --> 00:02:21,680
inode和I/O buffer

61
00:02:21,720 --> 00:02:23,080
那么文件和目录呢

62
00:02:23,120 --> 00:02:24,880
它和我们inode有一个交互

63
00:02:24,920 --> 00:02:26,520
我们需要通过inode来表示

64
00:02:26,560 --> 00:02:28,160
这个文件和目录的关系

65
00:02:28,200 --> 00:02:29,920
以及这个文件和目录

66
00:02:29,960 --> 00:02:32,560
它所在的位置和内容

67
00:02:32,600 --> 00:02:34,360
这个I/O buffer主要是用于说

68
00:02:34,400 --> 00:02:37,600
我们需要把文件数据读到内存中来

69
00:02:37,640 --> 00:02:39,040
放到一个buffer里面去

70
00:02:39,080 --> 00:02:41,000
或者把内存中的buffer数据呢

71
00:02:41,040 --> 00:02:42,960
写到我们硬盘中去

72
00:02:43,000 --> 00:02:45,760
这里面就有一个buffer这么一个管理

73
00:02:45,800 --> 00:02:48,360
这是我们说simple file system

74
00:02:48,400 --> 00:02:51,840
它大致涉及的内容

75
00:02:51,880 --> 00:02:54,480
那我们再从硬盘的角度来看一下

76
00:02:54,520 --> 00:02:56,440
这个Simple file system它的组成部分

77
00:02:56,480 --> 00:02:57,840
第一个叫super block

78
00:02:57,880 --> 00:02:59,680
根据这个名字可以看出来超级块

79
00:02:59,720 --> 00:03:01,760
它是对我们整个simple file system

80
00:03:01,800 --> 00:03:03,680
一个总体的一个描述

81
00:03:03,720 --> 00:03:05,840
包含了它一个标识 magic number

82
00:03:05,880 --> 00:03:07,560
然后它整体一个块数

83
00:03:07,600 --> 00:03:09,600
当前还有空闲多少块

84
00:03:09,640 --> 00:03:12,120
还有它的一个字符串信息

85
00:03:12,160 --> 00:03:15,040
这是super block内部的一个内容

86
00:03:15,080 --> 00:03:17,560
我们需要把它读到我们内存中去

87
00:03:17,600 --> 00:03:20,160
通过什么呢 sfs_do_mount

88
00:03:20,200 --> 00:03:22,480
那么这个do_mount要把文件系统

89
00:03:22,520 --> 00:03:25,320
加载到我们uCore kernel里去

90
00:03:25,360 --> 00:03:27,920
使得我们应用可以去访问

91
00:03:27,960 --> 00:03:30,200
那这一步呢 是在开始做

92
00:03:30,240 --> 00:03:31,360
文件系统初始化的时候

93
00:03:31,400 --> 00:03:35,560
需要去完成的工作

94
00:03:35,600 --> 00:03:37,880
紧接着呢 我们会在内存中

95
00:03:37,920 --> 00:03:38,600
建立好一个

96
00:03:38,640 --> 00:03:41,160
simple file system的整体框架

97
00:03:41,200 --> 00:03:43,880
这个框架什么呢 sfs_fs

98
00:03:43,920 --> 00:03:45,040
这个看名字有点怪

99
00:03:45,080 --> 00:03:46,240
就是simple file system的

100
00:03:46,280 --> 00:03:47,560
一个file system

101
00:03:47,600 --> 00:03:48,720
在这个结构里面呢

102
00:03:48,760 --> 00:03:50,280
你可以看到 刚才那个

103
00:03:50,320 --> 00:03:52,200
super block信息已经放到这儿

104
00:03:52,240 --> 00:03:56,040
第二部分呢 是这个文件系统所在的device

105
00:03:56,080 --> 00:03:57,720
也就说它有一个

106
00:03:57,760 --> 00:04:00,360
针对具体一个设备的表述

107
00:04:00,400 --> 00:04:03,000
这一块我们放后面会进一步讲解

108
00:04:03,040 --> 00:04:04,880
第三部分是freemap

109
00:04:04,920 --> 00:04:06,880
就是当前这个文件系统中

110
00:04:06,920 --> 00:04:10,000
还有哪些空闲的数据块 可以去使用

111
00:04:10,040 --> 00:04:12,280
那么通过freemap可以表示出来

112
00:04:12,320 --> 00:04:16,640
这是用一个bit来表示一个data的block

113
00:04:16,680 --> 00:04:20,200
还有就是sfs_buffer 用于缓冲用的

114
00:04:20,240 --> 00:04:22,280
还有呢 inode_list

115
00:04:22,320 --> 00:04:23,920
就是所有这里面的inode

116
00:04:23,960 --> 00:04:27,240
它会通过一个哈希或者是链表的方式

117
00:04:27,280 --> 00:04:28,600
保存在我们内存中

118
00:04:28,640 --> 00:04:30,120
便于我们来检索

119
00:04:30,160 --> 00:04:34,200
属于SFS这个文件系统一些inode情况

120
00:04:34,240 --> 00:04:37,200
那这就是形成一个整体的架构

121
00:04:37,240 --> 00:04:41,760
我们再逐步往下进一步细看

122
00:04:41,800 --> 00:04:43,160
第一个很关键的

123
00:04:43,200 --> 00:04:44,760
在这个硬盘块上面

124
00:04:44,800 --> 00:04:46,080
除了super block之外

125
00:04:46,120 --> 00:04:48,480
就是一个叫root-dir的inode

126
00:04:48,520 --> 00:04:50,200
什么叫root-dir inode

127
00:04:50,240 --> 00:04:52,720
就是根目录的inode的结构

128
00:04:52,760 --> 00:04:54,120
那么根目录表明了

129
00:04:54,160 --> 00:04:55,680
我们一开始访问这个文件系统

130
00:04:55,720 --> 00:04:58,160
可以看到的目录信息

131
00:04:58,200 --> 00:04:59,560
那这个根目录信息里面

132
00:04:59,600 --> 00:05:01,520
包含了直接索引块和间接索引块

133
00:05:01,560 --> 00:05:03,200
它大致的位置在什么地方

134
00:05:03,240 --> 00:05:04,240
就是在这里面

135
00:05:04,280 --> 00:05:07,240
用这个数据结构来表示出来的

136
00:05:07,280 --> 00:05:10,120
同时我们还可以看到对于目录而言

137
00:05:10,160 --> 00:05:13,080
它的数据它是什么呢

138
00:05:13,120 --> 00:05:14,080
包含了这部分内容

139
00:05:14,120 --> 00:05:15,240
就是一个是索引节点

140
00:05:15,280 --> 00:05:17,080
所占数据块的索引

141
00:05:17,120 --> 00:05:18,400
还有就是文件名

142
00:05:18,440 --> 00:05:19,680
这实际上表明一个目录项

143
00:05:19,720 --> 00:05:21,240
就是我们前面在讲

144
00:05:21,280 --> 00:05:23,440
文件系统抽象时候提到的

145
00:05:23,480 --> 00:05:26,040
目录是由一系列目录项组成

146
00:05:26,080 --> 00:05:28,680
在这里面我们是用一个数组方式来表示

147
00:05:28,720 --> 00:05:32,640
通过查找一个目录所在的inode

148
00:05:32,680 --> 00:05:34,360
所对应的它的data

149
00:05:34,400 --> 00:05:36,760
可以找着属于这个目录里

150
00:05:36,800 --> 00:05:38,040
所有的目录项

151
00:05:38,080 --> 00:05:39,040
而每一个目录项呢

152
00:05:39,080 --> 00:05:42,160
包含了关键的文件名

153
00:05:42,200 --> 00:05:46,240
和文件名所对应的inode的那个索引值

154
00:05:46,280 --> 00:05:53,360
OK这就是说我们目录项里面的内容

155
00:05:53,400 --> 00:05:56,040
第二部分呢 是我们文件的数据

156
00:05:56,080 --> 00:05:57,640
那么文件数据放在什么地方呢

157
00:05:57,680 --> 00:05:59,040
就是用这个来表示的

158
00:05:59,080 --> 00:06:02,440
也是一样 是由我们这个inode里面

159
00:06:02,480 --> 00:06:04,160
它的间接索引块和直接索引块

160
00:06:04,200 --> 00:06:07,280
来表明我们的data block在什么地方

161
00:06:07,320 --> 00:06:08,160
对于file而言

162
00:06:08,200 --> 00:06:09,640
这个data block就是它的data

163
00:06:09,680 --> 00:06:12,120
就是我们说文件的具体内容

164
00:06:12,160 --> 00:06:13,440
那我们如果要读写文件

165
00:06:13,480 --> 00:06:16,000
最终这个文件的数据放什么地方呢

166
00:06:16,040 --> 00:06:17,560
就放在这些地方里面

167
00:06:17,600 --> 00:06:20,840
通过inode里面index可以查找

168
00:06:20,880 --> 00:06:23,040
这些data block在所在的位置

169
00:06:23,080 --> 00:06:25,920
然后进一步通过我们硬盘的读写呢

170
00:06:25,960 --> 00:06:26,960
就可以把这个数据

171
00:06:27,000 --> 00:06:33,400
进行相应的读或者写操作

172
00:06:33,440 --> 00:06:35,920
这里面很关键就是inode了

173
00:06:35,960 --> 00:06:38,440
我们可以看看simple file system的inode

174
00:06:38,480 --> 00:06:40,520
包含什么样的信息

175
00:06:40,560 --> 00:06:42,560
它其实包含两个层面的内容

176
00:06:42,600 --> 00:06:44,400
第一个层面是在内存中

177
00:06:44,440 --> 00:06:46,160
它有一个sfs_inode

178
00:06:46,200 --> 00:06:48,840
第二层面是我们硬盘上 也有一个inode

179
00:06:48,880 --> 00:06:51,120
它称之为sfs_disk_inode

180
00:06:51,160 --> 00:06:53,000
可以看出来它们关系是什么

181
00:06:53,040 --> 00:07:01,000
disk_inode呢 是sfs_inode一个成员变量

182
00:07:01,040 --> 00:07:05,920
那我们需要通过这个sfs_disk_inode

183
00:07:05,960 --> 00:07:11,680
来完成进一步针对文件的读写操作

184
00:07:11,720 --> 00:07:14,160
那么这里面会涉及到打开 关闭文件

185
00:07:14,200 --> 00:07:15,040
读 写文件 

186
00:07:15,080 --> 00:07:17,480
还有读写inode所对应数据块的

187
00:07:17,520 --> 00:07:19,120
一系列操作

188
00:07:19,160 --> 00:07:23,120
那这些操作是什么 我们可以看看

189
00:07:23,160 --> 00:07:25,400
那么如果说我们知道一个inode

190
00:07:25,440 --> 00:07:27,400
我们希望访问这个inode的数据

191
00:07:27,440 --> 00:07:28,720
那么这里面存在两种情况

192
00:07:28,760 --> 00:07:30,960
一种是这个inode表明是一个目录

193
00:07:31,000 --> 00:07:32,760
或者这个inode表明是个文件

194
00:07:32,800 --> 00:07:35,680
这两者是不一样的

195
00:07:35,720 --> 00:07:39,080
这个函数就是sfs_bmap的一系列操作呢

196
00:07:39,120 --> 00:07:45,040
是关于文件这种情况的数据块读写

197
00:07:45,080 --> 00:07:47,640
而下面这几个函数 (direntry)

198
00:07:47,680 --> 00:07:48,920
就是目录entry呢

199
00:07:48,960 --> 00:07:52,400
它其实涉及到针对目录的 数据的读写

200
00:07:52,440 --> 00:07:54,960
可以看出来它们是不一样的

201
00:07:55,000 --> 00:07:57,200
但是呢 我们有一系列的

202
00:07:57,240 --> 00:07:59,920
高层的 针对file的一些操作

203
00:07:59,960 --> 00:08:02,680
这个操作 其实是和我们后续会讲到的

204
00:08:02,720 --> 00:08:04,120
虚拟文件系统相关

205
00:08:04,160 --> 00:08:07,880
它会把底层的一些函数的细节给屏蔽掉

206
00:08:07,920 --> 00:08:10,880
向上提供一个统一的接口比如open close

207
00:08:10,920 --> 00:08:11,720
这个接口是一样的

208
00:08:11,760 --> 00:08:13,680
但是它具体对应到

209
00:08:13,720 --> 00:08:15,480
simple file system的实现

210
00:08:15,520 --> 00:08:17,320
它这个open file或者close

211
00:08:17,360 --> 00:08:19,360
这些操作是不一样的

212
00:08:19,400 --> 00:08:21,720
通过这些函数呢来完成

213
00:08:21,760 --> 00:08:26,840
对一个文件的打开 关闭 读写操作

214
00:08:26,880 --> 00:08:30,400
紧接着还会通过不太一样的一些操作

215
00:08:30,440 --> 00:08:31,880
比如说opendir

216
00:08:31,920 --> 00:08:33,560
或者getdirectory entry来完成

217
00:08:33,600 --> 00:08:37,520
针对目录读打开 关闭操作

218
00:08:37,560 --> 00:08:38,880
这里面也写一个写

219
00:08:38,920 --> 00:08:41,240
大家仔细考虑一下这里面有写吗

220
00:08:41,280 --> 00:08:42,520
这是留给大家的一个问题

221
00:08:42,560 --> 00:08:44,400
大家可以再考虑一下

222
00:08:44,440 --> 00:08:45,280
这里面只是介绍了

223
00:08:45,320 --> 00:08:46,720
基于index这种方式的

224
00:08:46,760 --> 00:08:48,480
文件系统具体实现

225
00:08:48,520 --> 00:08:49,760
还有其它一些文件系统

226
00:08:49,800 --> 00:08:50,920
大家通过做实验

227
00:08:50,960 --> 00:08:53,120
还可以进一步掌握和了解

228
00:08:53,160 --> 00:08:53,160


