0
00:00:00,000 --> 00:00:15,440


1
00:00:15,480 --> 00:00:17,520
好 接下来给大家介绍一下

2
00:00:17,560 --> 00:00:19,720
X86中的中断处理的过程

3
00:00:19,760 --> 00:00:21,160
这里面会涉及到三部分

4
00:00:21,200 --> 00:00:25,840
第一个是谁产生了中断 就是X86的中断源 这是第一个

5
00:00:25,880 --> 00:00:29,160
第二个需要了解是CPU和操作系统

6
00:00:29,200 --> 00:00:32,120
软件和硬件如何结合在一起来处理中断

7
00:00:32,160 --> 00:00:34,600
第三部分是说你为了能够处理中断

8
00:00:34,640 --> 00:00:37,360
前面要做很多的初始化的工作

9
00:00:37,400 --> 00:00:39,360
把这个前期的环境给建好

10
00:00:39,400 --> 00:00:43,440
能够对中断向量表进行初始化

11
00:00:43,480 --> 00:00:45,080
这是三块内容

12
00:00:45,120 --> 00:00:46,560
那么有了这个知识之后

13
00:00:46,600 --> 00:00:50,280
大家能够对基于X86这个硬件的中断处理

14
00:00:50,320 --> 00:00:51,560
有更深入的理解

15
00:00:51,600 --> 00:00:54,520


16
00:00:54,560 --> 00:00:55,920
其实在这个原理课中

17
00:00:55,960 --> 00:01:00,520
我们也提到了中段 异常 比如说陷入等等

18
00:01:00,560 --> 00:01:05,800
那中断 异常在具体的CPU上面它有不同的表现形式

19
00:01:05,840 --> 00:01:07,560
那对于X86而言

20
00:01:07,600 --> 00:01:11,680
它把中断 异常作为特定的两种不同类型来分别处理

21
00:01:11,720 --> 00:01:14,240
但是它的实现机制是统一的

22
00:01:14,280 --> 00:01:15,440
对于中断而言

23
00:01:15,480 --> 00:01:18,080
我们可以看到外设会产生中断

24
00:01:18,120 --> 00:01:22,080
外设包括了硬盘 网卡 时钟 串口等等

25
00:01:22,120 --> 00:01:23,920
我们的软件也会产生中断

26
00:01:23,960 --> 00:01:25,160
软件通过什么呢

27
00:01:25,200 --> 00:01:26,520
通过刚才说的int 

28
00:01:26,560 --> 00:01:29,560
比如int80这种产生的软中断

29
00:01:29,600 --> 00:01:30,680
那么软中断用在什么地方呢

30
00:01:30,720 --> 00:01:32,280
用在我们的系统调用

31
00:01:32,320 --> 00:01:37,720
我们的应用程序可以通过软中断来获得我们操作系统提供的服务

32
00:01:37,760 --> 00:01:43,760
异常是另一类 异常是我们的程序在执行过程中做了不应该做的事情

33
00:01:43,800 --> 00:01:44,880
比如说除零错？？

34
00:01:44,920 --> 00:01:49,360
或者访问了一个非法的地址等等都会产生异常

35
00:01:49,400 --> 00:01:51,880
那异常也有严重程度一般的

36
00:01:51,920 --> 00:01:53,400
还有很严重的异常

37
00:01:53,440 --> 00:01:54,480
针对不同类型的异常

38
00:01:54,520 --> 00:01:57,560
我们的操作系统应该有不同的处理方式

39
00:01:57,600 --> 00:02:00,400
它的来源可以看到主要有三类

40
00:02:00,440 --> 00:02:03,360
外部中断 内部中断或者称之为软中断

41
00:02:03,400 --> 00:02:05,000
还有异常

42
00:02:05,040 --> 00:02:10,600
它们的特点 它们产生的时机 它们的严重程度

43
00:02:10,640 --> 00:02:13,560
他们的目标是什么 都是不一样的

44
00:02:13,600 --> 00:02:14,960
这边有个了解 

45
00:02:15,000 --> 00:02:18,760
那中断产生之后 我们操作系统怎么办

46
00:02:18,800 --> 00:02:20,760
一般来说中断是由于外设

47
00:02:20,800 --> 00:02:22,600
假设是外设产生的中断

48
00:02:22,640 --> 00:02:27,080
我们操作系统就应该能够理解外设需要我们做什么

49
00:02:27,120 --> 00:02:29,040
然后产生相应的反馈

50
00:02:29,080 --> 00:02:30,920
比如说举个简单例子

51
00:02:30,960 --> 00:02:34,840
网卡产生的中断 那它得到了一个数据包产生了中断

52
00:02:34,880 --> 00:02:38,080
那我们操作系统就应该对这个数据包做进一步的处理

53
00:02:38,120 --> 00:02:40,040
来发给相应的应用程序

54
00:02:40,080 --> 00:02:43,520
需要这个数据的应用程序去做操作

55
00:02:43,560 --> 00:02:45,760
这实际上是我们操作系统干的一个事情

56
00:02:45,800 --> 00:02:47,760
它需要去做相应的响应

57
00:02:47,800 --> 00:02:51,440
那如果说是一个异常产生了

58
00:02:51,480 --> 00:02:52,880
那么异常产生之后呢

59
00:02:52,920 --> 00:02:56,200
我们的操作系统要根据这个异常的严重程度

60
00:02:56,240 --> 00:02:58,240
才能把运行的这个程序 我们称之为进程

61
00:02:58,280 --> 00:03:00,560
把这个进程给kill掉 给杀死

62
00:03:00,600 --> 00:03:05,240
也有可能是我们的应用程序产生的软中断

63
00:03:05,280 --> 00:03:08,840
那我们的操作系统就可以去完成这个服务

64
00:03:08,880 --> 00:03:11,800
最终让我们的应用程序可以得到这样的服务

65
00:03:11,840 --> 00:03:13,480
这是不同的处理方式

66
00:03:13,520 --> 00:03:17,280
那无论哪种方式 其实一个中断 异常 

67
00:03:17,320 --> 00:03:20,920
或者说是我们称之为的软中断

68
00:03:20,960 --> 00:03:24,200
两种：硬中断 或者叫外中断

69
00:03:24,240 --> 00:03:26,160
内中断 （也叫）软中断等等

70
00:03:26,200 --> 00:03:29,040
这些都和所谓的中断号有一个对应关系

71
00:03:29,080 --> 00:03:31,360
比如产生的中断 它对应有一个中断号

72
00:03:31,400 --> 00:03:36,760
那么中断号唯一标示了这一个中断的特征 这是一个

73
00:03:36,800 --> 00:03:39,040
第二个 对于每一个中断号

74
00:03:39,080 --> 00:03:41,960
都有相应的中断处理的一个例程

75
00:03:42,000 --> 00:03:44,120
来完成对应的操作

76
00:03:44,160 --> 00:03:47,320
这个是我们操作系统需要去建立好的

77
00:03:47,360 --> 00:03:50,160
每一个中断或者异常都有一个中断服务例程

78
00:03:50,200 --> 00:03:56,200
简称ISR 就是Interrupt Service Routine和它关联

79
00:03:56,240 --> 00:04:00,960
关联之后一旦产生了某种类型的中断或异常

80
00:04:01,000 --> 00:04:05,280
就可以调用相应的中断服务例程去执行相应的操作

81
00:04:05,320 --> 00:04:08,320
那这个关联的建立

82
00:04:08,360 --> 00:04:11,960
是我们说操作系统需要去考虑和实现的

83
00:04:12,000 --> 00:04:14,080
我们需要去完成相应的处理过程

84
00:04:14,120 --> 00:04:17,800
但这个处理过程 也和我们的具体硬件是相关的

85
00:04:17,840 --> 00:04:20,840
所以说我们是需要去了解在X86环境下

86
00:04:20,880 --> 00:04:23,760
怎么来完成这个关联的建立

87
00:04:23,800 --> 00:04:24,800
那我们可以看看

88
00:04:24,840 --> 00:04:27,760
在X86环境中它有一系列的硬件机制

89
00:04:27,800 --> 00:04:30,800
来支持这种对应关系的一个建立

90
00:04:30,840 --> 00:04:35,760
它有一个IDT 就是中断描述符表

91
00:04:35,800 --> 00:04:38,960
跟我们刚才看到这个全局描述符表很类似

92
00:04:39,000 --> 00:04:40,720
只是它专门用来描述中断的

93
00:04:40,760 --> 00:04:42,520
这里面也是一个大的数组

94
00:04:42,560 --> 00:04:46,200
里面的每一项我们称之为中断门或者陷阱门

95
00:04:46,240 --> 00:04:49,200
trap就是我们说的软中断

96
00:04:49,240 --> 00:04:52,360
中断门或者陷阱门对应相应的中断号

97
00:04:52,400 --> 00:04:54,080
一个中断号可以有一个index

98
00:04:54,120 --> 00:04:55,480
我们根据这个中断号

99
00:04:55,520 --> 00:05:00,800
可以找到它所谓的一个中断门或者陷阱门

100
00:05:00,840 --> 00:05:02,280
基于这个中断门或者陷阱门

101
00:05:02,320 --> 00:05:04,400
我们可以进一步获取到

102
00:05:04,440 --> 00:05:08,480
跟这个中断门 陷阱门相关的段的选择子

103
00:05:08,520 --> 00:05:13,640
我们前面讲的段机制里面 有段的选择子和它的段类的偏移

104
00:05:13,680 --> 00:05:16,080
有了这两个信息 我们就可以知道

105
00:05:16,120 --> 00:05:20,080
一个中断服务例程的地址 就在这里面得到了表述

106
00:05:20,120 --> 00:05:25,200
所以说可以看到 IDT结合我们刚才看到的GDT两个合在一起

107
00:05:25,240 --> 00:05:28,280
就可以完成硬件的中断 

108
00:05:28,320 --> 00:05:32,960
或者是异常和中断服务例程对应的链接关系的建立

109
00:05:33,000 --> 00:05:33,880
就可以搞定了

110
00:05:33,920 --> 00:05:37,040
那么这个表本身呢 它有一个起始地址

111
00:05:37,080 --> 00:05:39,000
放在IDTR里面去

112
00:05:39,040 --> 00:05:40,640
需要告诉我们的机器

113
00:05:40,680 --> 00:05:44,280
告诉我们的CPU说你这个IDT在什么地方

114
00:05:44,320 --> 00:05:45,640
所以说可以看出来

115
00:05:45,680 --> 00:05:48,760
这个IDT也是需要我们的操作系统来建立的

116
00:05:48,800 --> 00:05:49,560
这是第一个

117
00:05:49,600 --> 00:05:51,520
第二个它的起始地址

118
00:05:51,560 --> 00:05:55,080
要通过一个特定的指令来告诉我们的CPU

119
00:05:55,120 --> 00:05:57,560
说这个IDT在什么地方

120
00:05:57,600 --> 00:05:59,760
那么我们后面会讲到

121
00:05:59,800 --> 00:06:04,000
要怎么来完成相应的工作

122
00:06:04,040 --> 00:06:08,320
好 对于刚才提到的IDT表中的每一项

123
00:06:08,360 --> 00:06:11,080
我们称之为中断门或者陷阱门呢

124
00:06:11,120 --> 00:06:12,640
它有它相应的格式

125
00:06:12,680 --> 00:06:17,000
这里面最主要的两个一个是段选择子

126
00:06:17,040 --> 00:06:19,520
第二个是它的offset 这两块

127
00:06:19,560 --> 00:06:21,400
这两个信息其实也就意味着

128
00:06:21,440 --> 00:06:27,480
它的中断服务例程的起始地址是知道的了

129
00:06:27,520 --> 00:06:30,240
这是一个大致的一个展示图

130
00:06:30,280 --> 00:06:31,680
产生了一个中断之后 

131
00:06:31,720 --> 00:06:35,600
根据这个中断我们可以知道它的中断号

132
00:06:35,640 --> 00:06:39,640
CPU会根据这个中断号来查这个IDT到底属于哪一项

133
00:06:39,680 --> 00:06:41,000
知道它的index

134
00:06:41,040 --> 00:06:44,160
找到相应的中断门或者陷阱门

135
00:06:44,200 --> 00:06:47,440
然后从这里面取出它的段选择子

136
00:06:47,480 --> 00:06:51,320
以这个选择子作为index进一步查找GDT

137
00:06:51,360 --> 00:06:55,000
我们前面讲了GDT 就是全局描述符表

138
00:06:55,040 --> 00:06:57,080
既然它作为index来查 查什么东西呢

139
00:06:57,120 --> 00:06:59,160
GDT里面存的是什么呢

140
00:06:59,200 --> 00:07:01,280
存的是段描述符

141
00:07:01,320 --> 00:07:06,600
段描述符里面有一个基地址 Base address

142
00:07:06,640 --> 00:07:10,000
再加上它谁在里面存的Offset

143
00:07:10,040 --> 00:07:13,440
合在一起就形成了相应的线性地址

144
00:07:13,480 --> 00:07:18,680
从而可以指向我们说的ISR 中断服务例程

145
00:07:18,720 --> 00:07:20,640
所以说一旦产生了某一个中断

146
00:07:20,680 --> 00:07:24,640
CPU可以自动的在硬件这个层面访问这两个表

147
00:07:24,680 --> 00:07:28,440
需要注意这两个表 是我们uCore建立好的

148
00:07:28,480 --> 00:07:31,520
一旦建立好之后 那我们的CPU就可以基于这两个表

149
00:07:31,560 --> 00:07:36,400
来查到相应的中断需要对应的中断处理例程

150
00:07:36,440 --> 00:07:39,000
当然这个例程是我们操作系统来实现的

151
00:07:39,040 --> 00:07:41,440
这样可以确保 一旦产生了某个异常

152
00:07:41,480 --> 00:07:42,680
或者某个中断之后

153
00:07:42,720 --> 00:07:45,080
我们的操作系统能够及时的响应

154
00:07:45,120 --> 00:07:48,160
去调用相应的函数来完成相应的处理

155
00:07:48,200 --> 00:07:55,000
这就是中断处理的初始化的过程

156
00:07:55,040 --> 00:07:58,040
另一方面需要注意的是 当产生中断之后

157
00:07:58,080 --> 00:08:02,120
中断会打断当前正在执行的程序

158
00:08:02,160 --> 00:08:04,760
然后去执行刚才说到的中断服务例程

159
00:08:04,800 --> 00:08:10,360
执行完毕之后再返回到当前被打断的程序继续让这个程序去执行

160
00:08:10,400 --> 00:08:14,000
那么这有一个打断和恢复 就是打断就需要一个保存

161
00:08:14,040 --> 00:08:17,000
最后要返回去要恢复 这么一个过程

162
00:08:17,040 --> 00:08:21,760
那么我们前面讲到了 在不同的特权级

163
00:08:21,800 --> 00:08:23,560
它的处理方式是不一样的

164
00:08:23,600 --> 00:08:26,760
特权级是由谁来决定的 是我们的段描述符里面会有看到

165
00:08:26,800 --> 00:08:30,560
那么段描述符里面会设定它到底处于哪个特权级

166
00:08:30,600 --> 00:08:34,720
比如说我们的CS它的低两位

167
00:08:34,760 --> 00:08:38,000
它如果低两位是0 代表是运行在内核态

168
00:08:38,040 --> 00:08:42,000
那么CS它的最低两位是3

169
00:08:42,040 --> 00:08:44,600
代表运行在用户态

170
00:08:44,640 --> 00:08:48,280
在内核态产生的中断依然在内核态

171
00:08:48,320 --> 00:08:52,680
但是在用户态产生的中断也会跳到内核态里面去

172
00:08:52,720 --> 00:08:54,360
那这是两种不同的方式

173
00:08:54,400 --> 00:08:57,120
因为这里面产生了特权级的变化

174
00:08:57,160 --> 00:08:59,360
对于这种特权级变和没变呢

175
00:08:59,400 --> 00:09:03,040
中断的保存与恢复也是不一样的

176
00:09:03,080 --> 00:09:08,040
我们可以看一看 这边是代表是说产生了中断之后

177
00:09:08,080 --> 00:09:12,800
在同一个特权 意味着在内核态里面产生的中断依然在内核态

178
00:09:12,840 --> 00:09:14,360
这时候会发生什么变化

179
00:09:14,400 --> 00:09:17,080
第一个可以看到 它的Stack

180
00:09:17,120 --> 00:09:19,480
它的栈还是用同一个栈

181
00:09:19,520 --> 00:09:23,880
没有发生变化 只是在这个栈上面压了一些寄存器内容

182
00:09:23,920 --> 00:09:26,440
被打断的那一刻寄存器的内容

183
00:09:26,480 --> 00:09:28,840
第一个是什么呢

184
00:09:28,880 --> 00:09:31,080
可以看到有Error code

185
00:09:31,120 --> 00:09:35,680
这个Error code代表是特意的严重的异常

186
00:09:35,720 --> 00:09:40,440
不是每一个中断或者异常都会产生Error code

187
00:09:40,480 --> 00:09:42,360
第二个会压入EIP和CS

188
00:09:42,400 --> 00:09:45,120
是当前被打断的那个地址

189
00:09:45,160 --> 00:09:48,520
或者是当前被打断的下一条地址

190
00:09:48,560 --> 00:09:50,120
第三个是EFLAGS

191
00:09:50,160 --> 00:09:54,600
当前被打断的时候的标志性的内容

192
00:09:54,640 --> 00:09:56,360
第三个是由我们的硬件

193
00:09:56,400 --> 00:10:00,360
一旦产生中断的时候硬件会压栈压进去

194
00:10:00,400 --> 00:10:04,480
但可以看到它是压在同一个栈里面

195
00:10:04,520 --> 00:10:09,880
第二个如果说当发生中断的时候处于不同特权级

196
00:10:09,920 --> 00:10:15,600
意味着产生中断那一刻 我们的应用程序正在用户态执行

197
00:10:15,640 --> 00:10:17,560
在用户态执行的时候 我们可以看到

198
00:10:17,600 --> 00:10:21,360
第一从用户态到内核态

199
00:10:21,400 --> 00:10:23,960
他们用的是不同的栈

200
00:10:24,000 --> 00:10:27,240
Stack1 Stack2 用的是不同的栈

201
00:10:27,280 --> 00:10:32,840
所以说当由于特权级变化产生了中断的时候呢

202
00:10:32,880 --> 00:10:35,040
除了压刚才说的那些内容之外

203
00:10:35,080 --> 00:10:38,600
还有很重要的两个信息是ESP和SS

204
00:10:38,640 --> 00:10:43,480
这两个内容是当时产生中断的时候

205
00:10:43,520 --> 00:10:46,120
在用户态里面的那个栈的地址

206
00:10:46,160 --> 00:10:48,440
就是SS和ESP

207
00:10:48,480 --> 00:10:50,640
可以看出来它们有很大的区别

208
00:10:50,680 --> 00:10:53,600
很明显在执行完毕要恢复的时候

209
00:10:53,640 --> 00:10:55,000
对于这边而言

210
00:10:55,040 --> 00:10:57,000
它还是恢复到同一个特权级

211
00:10:57,040 --> 00:10:59,480
还是在同一个栈里面继续往下走

212
00:10:59,520 --> 00:11:01,720
对于这边而言呢

213
00:11:01,760 --> 00:11:04,600
它一旦恢复到用户态去执行

214
00:11:04,640 --> 00:11:09,560
也会产生变化 不会用内核态去执行

215
00:11:09,600 --> 00:11:15,400
这是不同特权级下 中断切换对堆栈的影响

216
00:11:15,440 --> 00:11:16,640
给大家做一个简单的介绍

217
00:11:16,680 --> 00:11:20,760
那么X86 当它完成中断服务例程处理完之后

218
00:11:20,800 --> 00:11:23,600
我们还需要返回到被打断程序继续执行

219
00:11:23,640 --> 00:11:25,920
这里面对于中断服务例程来说

220
00:11:25,960 --> 00:11:29,200
它会通过一个iret指令来完成这个返回

221
00:11:29,240 --> 00:11:30,960
但对于我们通常的程序来说

222
00:11:31,000 --> 00:11:35,400
它是通过ret和retf完成函数的返回

223
00:11:35,440 --> 00:11:37,800
而这个是中断服务例程的返回

224
00:11:37,840 --> 00:11:39,800
也意味着他们的处理方式是不一样的

225
00:11:39,840 --> 00:11:43,480
对于没有改变特权级的方式我们可以看到

226
00:11:43,520 --> 00:11:46,160
它其实是把在同一个栈里面

227
00:11:46,200 --> 00:11:48,080
把这个弹出 

228
00:11:48,120 --> 00:11:54,680
根据CS和EIP 来跳到当前被打断那个地方继续执行

229
00:11:54,720 --> 00:11:57,560
同时还要恢复它的Eflage的值

230
00:11:57,600 --> 00:12:00,120
这是iret弹出来的时候干的事情

231
00:12:00,160 --> 00:12:04,200
但对于ret而言 它只是弹出了EIP

232
00:12:04,240 --> 00:12:08,600
跳到当时调的那个下一条指令去执行

233
00:12:08,640 --> 00:12:11,960
对retf而言 除了弹EIP之外

234
00:12:12,000 --> 00:12:16,160
还会把CS也给弹出来 恢复CS

235
00:12:16,200 --> 00:12:19,560
实行一种远程跳转的功能

236
00:12:19,600 --> 00:12:20,640
这是他们处理不同

237
00:12:20,680 --> 00:12:21,680
当然这里面说到的是

238
00:12:21,720 --> 00:12:26,200
对于没有特级变化的情况的中断的返回

239
00:12:26,240 --> 00:12:29,680
对于特权级变化的中断的返回会我们可以看到

240
00:12:29,720 --> 00:12:33,560
它弹出的东西更多 这些都要恢复

241
00:12:33,600 --> 00:12:38,080
EIP CS EFLAGE还有 ESP SS

242
00:12:38,120 --> 00:12:41,400
当这个中断服务例程要返回的时候

243
00:12:41,440 --> 00:12:45,680
它需要完成这个弹出的工作

244
00:12:45,720 --> 00:12:50,320
从而可以确保被打断的用户态的程序能够正常地继续执行

245
00:12:50,360 --> 00:12:52,440
不受到影响

246
00:12:52,480 --> 00:12:54,480
当然其实这里面还需要注意

247
00:12:54,520 --> 00:12:56,840
这只是硬件完成的功劳

248
00:12:56,880 --> 00:13:00,720
如果中断服务例程需要对其它寄存器进行修改的话

249
00:13:00,760 --> 00:13:04,560
那么在修改之前 你的中断服务例程需要把寄存器保存起来

250
00:13:04,600 --> 00:13:09,720
在快结束的时候 在iret返回的时候

251
00:13:09,760 --> 00:13:12,960
需要把寄存器恢复回来 然后再恢复这些寄存器

252
00:13:13,000 --> 00:13:19,680
从而可以确保 跳回到这个被中断的应用程序时

253
00:13:19,720 --> 00:13:21,440
程序执行的时候才可以正确执行

254
00:13:21,480 --> 00:13:23,840
大家可以想像 万一这里面的某一个寄存器的值

255
00:13:23,880 --> 00:13:26,880
由于中断服务例程的改变发生了改变

256
00:13:26,920 --> 00:13:30,520
其实你就不能保证我们的应用程序

257
00:13:30,560 --> 00:13:33,240
能够按照它没打断的那样去继续执行了

258
00:13:33,280 --> 00:13:37,560
这实际上说的是中断服务例程要完成的工作

259
00:13:37,600 --> 00:13:40,160
可以看出来 它很重要的是要完成

260
00:13:40,200 --> 00:13:45,080
整个这个被打断程序的一个状态的保存与恢复

261
00:13:45,120 --> 00:13:48,680
这是由我们的硬件 这是硬件自动干的

262
00:13:48,720 --> 00:13:52,760
还有一部分没有描述 我们的软件 我们的操作系统

263
00:13:52,800 --> 00:13:56,560
在中断服务例程处理过程中需要去保存和恢复的

264
00:13:56,600 --> 00:13:58,440
这是通过这两块的结合

265
00:13:58,480 --> 00:14:05,120
才能够确保整个的中断处理过程的正确的执行

266
00:14:05,160 --> 00:14:06,720
接下来我们再看一下 

267
00:14:06,760 --> 00:14:09,960
通过中断处理来实现所谓的系统调用

268
00:14:10,000 --> 00:14:12,320
系统调用其实可以理解为一种特殊的中断

269
00:14:12,360 --> 00:14:16,120
它称之为trap 陷入 或者叫软中断

270
00:14:16,160 --> 00:14:17,560
有不同的称呼方式

271
00:14:17,600 --> 00:14:19,200
我们这里面可以看到

272
00:14:19,240 --> 00:14:22,560
我们的应用程序通过系统调用访问OS的内核服务

273
00:14:22,600 --> 00:14:24,640
这一段按照它的实现来说

274
00:14:24,680 --> 00:14:27,240
应该属lab5的内容

275
00:14:27,280 --> 00:14:29,240
直到有了用户态的进程之后

276
00:14:29,280 --> 00:14:33,400
才会通过系统调用来获得OS的服务

277
00:14:33,440 --> 00:14:34,800
但是这里面给大家做个简单的介绍

278
00:14:34,840 --> 00:14:37,440
因为从具体的实践上来说

279
00:14:37,480 --> 00:14:41,160
系统调用的这个机制的建立 和我们中断机制的建立

280
00:14:41,200 --> 00:14:44,480
其实是很接近的 基本上没什么区别

281
00:14:44,520 --> 00:14:46,080
只有一点微小的差别

282
00:14:46,120 --> 00:14:50,320
在实践上面需要考虑 需要如何指定中断

283
00:14:50,360 --> 00:14:54,720
如何完成从用户态到内核态的切换

284
00:14:54,760 --> 00:14:57,840
以及从内核态回到用户态去

285
00:14:57,880 --> 00:15:00,680
这一块有些特殊的一些方法

286
00:15:00,720 --> 00:15:02,720
或者是你通过一种特殊的指令

287
00:15:02,760 --> 00:15:05,000
SYSENTER或者SYSEXIT

288
00:15:05,040 --> 00:15:09,480
这种特殊的新的一些机器指令可以完成相应的功劳

289
00:15:09,520 --> 00:15:12,800
我们在uCore用的还是传统的嵌入的方式

290
00:15:12,840 --> 00:15:14,360
比如说int 80

291
00:15:14,400 --> 00:15:18,480
这种通过软中断的方式来完成系统调用

292
00:15:18,520 --> 00:15:19,800
但是为了完成系统调用

293
00:15:19,840 --> 00:15:24,520
你需要在建立IDT 中断描述符表的时候

294
00:15:24,560 --> 00:15:26,920
要对此要特殊考虑

295
00:15:26,960 --> 00:15:29,800
这跟其他的中断的处理不太一样

296
00:15:29,840 --> 00:15:35,400
因为这里面很明确的指出了是从用户态执行int80

297
00:15:35,440 --> 00:15:39,840
或者int 某一个数能够切换到内核态

298
00:15:39,880 --> 00:15:42,560
它有一个从低优先级到高优先级的转变

299
00:15:42,600 --> 00:15:44,840
这个机制需要我们在IDT表里面

300
00:15:44,880 --> 00:15:48,720
给它设置好相应的权限才能够完成这种转变

301
00:15:48,760 --> 00:15:50,240
好 那我们可以看到

302
00:15:50,280 --> 00:15:56,440
后面的demo也会给大家做进一步的讲解

303
00:15:56,480 --> 00:15:58,840
这是相关的一些参考资料

304
00:15:58,880 --> 00:16:03,200
那我们这里面大量的出现的这个

305
00:16:03,240 --> 00:16:06,680
IA-32 Architectures Software Developer's Manual

306
00:16:06,720 --> 00:16:09,600
这是一个Intel英文的文档 很详细

307
00:16:09,640 --> 00:16:12,080
但是也比较琐碎

308
00:16:12,120 --> 00:16:14,120
也希望大家有时间的话

309
00:16:14,160 --> 00:16:16,080
可以去仔细看一看

310
00:16:16,120 --> 00:16:21,160
相信对你这个代码的理解会有更深入的一个掌握

311
00:16:21,200 --> 00:16:22,360


312
00:16:22,400 --> 00:16:25,040
好 那我们最后来小结一下

313
00:16:25,080 --> 00:16:25,680
我们可以看到 

314
00:16:25,720 --> 00:16:30,840
在Lab 1里面我们介绍到其实很多还都是基本的知识

315
00:16:30,880 --> 00:16:32,400
还没有真正讲代码

316
00:16:32,440 --> 00:16:35,760
那我们后面在demo会给大家做一个代码的讲解

317
00:16:35,800 --> 00:16:39,760
可以看到 我们需要去理解保护模式 段机制

318
00:16:39,800 --> 00:16:43,320
从而可以知道我们的uCore操作系统启动之后

319
00:16:43,360 --> 00:16:45,200
处于一种什么样的运行状态

320
00:16:45,240 --> 00:16:48,640
它怎么被我们的Bootloader给加载到内存当中去的

321
00:16:48,680 --> 00:16:53,880
第二个 操作系统中它怎么来完成函数调用关系

322
00:16:53,920 --> 00:16:55,640
怎么来建立这个函数的调用站

323
00:16:55,680 --> 00:16:58,440
其实这实际上靠我们的编译器GCC来完成的

324
00:16:58,480 --> 00:17:00,920
但是我们可以通过一种方法

325
00:17:00,960 --> 00:17:02,800
在我们Lab 1里面需要能够把这个

326
00:17:02,840 --> 00:17:05,560
GCC建立的调用栈给展示出来

327
00:17:05,600 --> 00:17:08,240
展示出来之后 便于我们后续的

328
00:17:08,280 --> 00:17:12,600
对这个出现错误的时候 或者说对它进行一些更深入的理解

329
00:17:12,640 --> 00:17:14,680
知道函数调用怎么产生的

330
00:17:14,720 --> 00:17:16,800
它为了完成某个事情 它调用了多少函数

331
00:17:16,840 --> 00:17:18,280
形成了怎么一个调用关系

332
00:17:18,320 --> 00:17:22,280
这实际上是说C函数调用是需要去了解的

333
00:17:22,320 --> 00:17:26,360
另外 我们也知道操作系统用到很多的一些特权指令

334
00:17:26,400 --> 00:17:28,560
而这些特权指令或者机器指令呢

335
00:17:28,600 --> 00:17:30,680
没法用C语言来表述

336
00:17:30,720 --> 00:17:34,160
为此可以用汇编语言 或者用内联汇编

337
00:17:34,200 --> 00:17:36,920
在C的文件里面嵌入一些汇编

338
00:17:36,960 --> 00:17:39,560
更简洁的实现一些特定的功能

339
00:17:39,600 --> 00:17:45,360
比如说加载页表 加载全局描述符表 加载中断描述符表等等

340
00:17:45,400 --> 00:17:48,000
这些都可以通过内联汇编来实现

341
00:17:48,040 --> 00:17:51,560
为此给大家介绍了一下内联汇编大致的含义

342
00:17:51,600 --> 00:17:54,800
使得大家在阅读这个uCore代码

343
00:17:54,840 --> 00:17:57,640
特别是碰到内联汇编的时候不会感到陌生

344
00:17:57,680 --> 00:17:59,560
知道它大致的一个含义

345
00:17:59,600 --> 00:18:03,680
最后给大家介绍一下关于X86下面的中断处理机制

346
00:18:03,720 --> 00:18:06,080
这也是我们Lab 1里面一个很重要的环节

347
00:18:06,120 --> 00:18:07,960
知道怎么中断建立的

348
00:18:08,000 --> 00:18:10,480
一个外设产生的一个中断

349
00:18:10,520 --> 00:18:14,440
或者应用程序产生的异常等等

350
00:18:14,480 --> 00:18:18,160
那我们应该有一套机制能够应对这种情况

351
00:18:18,200 --> 00:18:19,880
能够及时的响应这种情况

352
00:18:19,920 --> 00:18:21,600
正确的响应这个外设的请求

353
00:18:21,640 --> 00:18:27,000
或者是说能够及时的处理这些异常 错误的状态

354
00:18:27,040 --> 00:18:29,440
这都是我们操作系统去完成的功能

355
00:18:29,480 --> 00:18:30,120
所以在这里面呢

356
00:18:30,160 --> 00:18:31,600
给大家做了一个简单的介绍

357
00:18:31,640 --> 00:18:33,400
看看在X86硬件情况下

358
00:18:33,440 --> 00:18:35,920
怎么能有效的去对它进行管理

359
00:18:35,960 --> 00:18:40,280
好 这也是我们Lab 1的基本知识的部分

360
00:18:40,320 --> 00:18:41,080
谢谢大家

361
00:18:41,120 --> 00:18:41,120


