0
00:00:00,000 --> 00:00:07,000


1
00:00:07,200 --> 00:00:11,240
接下来我们介绍虚拟存储的基本概念

2
00:00:11,320 --> 00:00:14,280
那在这里头呢我们前面已经说清楚了

3
00:00:14,320 --> 00:00:19,840
交换和覆盖这两种技术所存在的问题

4
00:00:19,880 --> 00:00:22,920
然后我们也说到了程序访问的时候

5
00:00:22,960 --> 00:00:24,640
它的局部性特征

6
00:00:24,680 --> 00:00:27,280
有了这个特征之后我们有可能来实现

7
00:00:27,320 --> 00:00:29,240
一个虚拟存储系统

8
00:00:29,280 --> 00:00:31,960
那么在这里呢虚拟存储呢

9
00:00:32,000 --> 00:00:33,360
它的直观思路很简单

10
00:00:33,400 --> 00:00:38,800
就是把不常用的部分 内存块 放到外存当中

11
00:00:38,840 --> 00:00:41,560
那有了这一条我们就可以做到这件事情了

12
00:00:41,600 --> 00:00:44,720
那具体的做法呢是这样的

13
00:00:44,760 --> 00:00:46,520
程序在开始执行的时候

14
00:00:46,560 --> 00:00:51,440
你需要把你的代码和数据加载到内存当中来

15
00:00:51,480 --> 00:00:55,800
原来的加载呢是把整个进程的

16
00:00:55,840 --> 00:00:57,680
地址空间内容全部加载进来

17
00:00:57,720 --> 00:00:58,880
那现在变成什么呢

18
00:00:58,920 --> 00:01:02,080
加载的时候只是将当前指令执行

19
00:01:02,120 --> 00:01:04,840
所需要的部分这些页

20
00:01:04,880 --> 00:01:08,240
或者是段加载到内存当中来

21
00:01:08,280 --> 00:01:09,920
那这是起头的时候

22
00:01:09,960 --> 00:01:13,680
然后在执行的过程当中因为你只加载了一部分

23
00:01:13,720 --> 00:01:16,560
在指令执行过程当中有可能就是访问到

24
00:01:16,600 --> 00:01:19,560
某一个指令或者访问到某一个数据的时候

25
00:01:19,600 --> 00:01:20,520
这时候不占内存

26
00:01:20,560 --> 00:01:23,680
这就是我们这里说的出现缺页或者是缺段

27
00:01:23,720 --> 00:01:25,240
好 这时候怎么办呢

28
00:01:25,280 --> 00:01:30,080
这个时候硬件处理器通知操作系统

29
00:01:30,120 --> 00:01:34,000
将相应的页面或者段调入到内存里头

30
00:01:34,040 --> 00:01:36,680
然后重新执行这条指令

31
00:01:36,720 --> 00:01:39,480
那这是装载和执行过程当中

32
00:01:39,520 --> 00:01:41,720
那如果说仅有这两条的话

33
00:01:41,760 --> 00:01:44,600
就是刚开始装一部分 后面缺哪个装哪个

34
00:01:44,640 --> 00:01:48,360
这样到最后结果是我们所有的全都装内存里头了

35
00:01:48,400 --> 00:01:49,880
好 为了提高它的效率

36
00:01:49,920 --> 00:01:52,400
操作系统呢会再多一件事

37
00:01:52,440 --> 00:01:55,360
你需要监控进程地址空间里

38
00:01:55,400 --> 00:01:57,680
在内存里的这些它的使用情况

39
00:01:57,720 --> 00:02:02,080
把暂时不用的页面或段保存到外存当中去

40
00:02:02,120 --> 00:02:03,240
 这时候有个问题是说

41
00:02:03,280 --> 00:02:05,480
我怎么知道哪些是暂时不用的

42
00:02:05,520 --> 00:02:09,320
好 这就是我们后面讨论置换算法的时候

43
00:02:09,360 --> 00:02:12,040
需要讨论的内容 好 这个基本原理呢

44
00:02:12,080 --> 00:02:14,040
基本上我分成这样三条就足够了

45
00:02:14,080 --> 00:02:15,560
那具体说起来呢

46
00:02:15,600 --> 00:02:19,320
根据分块的大小我们还前面有

47
00:02:19,360 --> 00:02:22,200
非连续物理内存分配的时候

48
00:02:22,240 --> 00:02:24,880
讲到过有页式和段式

49
00:02:24,920 --> 00:02:27,440
那在这里呢我们说到装入

50
00:02:27,480 --> 00:02:30,200
或者说换出的部分是页面或者是段

51
00:02:30,240 --> 00:02:33,520
那到这儿呢在前面只要有往外换

52
00:02:33,560 --> 00:02:34,960
那就变成了加上虚拟

53
00:02:35,000 --> 00:02:36,920
这时候我们就有虚拟页式和

54
00:02:36,960 --> 00:02:39,080
虚拟段式这两种情况

55
00:02:39,120 --> 00:02:41,320
好 有了这两种情况之后

56
00:02:41,360 --> 00:02:43,440
那我们这个基本的概念就有了

57
00:02:43,480 --> 00:02:45,880
好 那 我们说如果我们在这里

58
00:02:45,920 --> 00:02:48,080
做成这种情况它会是一个什么效果

59
00:02:48,120 --> 00:02:49,120
这我们前面也说过

60
00:02:49,160 --> 00:02:56,000
根据目标我想建造一个抽象的地址空间

61
00:02:56,040 --> 00:02:58,840
里头不管是在内存里头还是在外存里头

62
00:02:58,880 --> 00:03:00,520
它是一个虚拟的地址空间

63
00:03:00,560 --> 00:03:04,600
它实际上会映射到物理内存或者是磁盘

64
00:03:04,640 --> 00:03:07,320
那这个时候呢我们可以得到什么特征

65
00:03:07,360 --> 00:03:11,440
不连续 你的物理页面分配可以不连续

66
00:03:11,480 --> 00:03:14,920
那这是我们前面非连续存储分配的特征

67
00:03:14,960 --> 00:03:18,080
第二个呢虚拟地址空间也可以不连续

68
00:03:18,120 --> 00:03:20,280
好 然后呢在这基础上

69
00:03:20,320 --> 00:03:23,040
我们说由于我可以把一部分放到外存里头去

70
00:03:23,080 --> 00:03:27,200
那这时候我就可以提供更大的用户空间

71
00:03:27,240 --> 00:03:32,600
我可以执行我的进程大于你物理内存的情况下

72
00:03:32,640 --> 00:03:34,800
我仍然可以在我的系统上执行

73
00:03:34,840 --> 00:03:38,520
同时交换技术是把整个进程地址空间全换出去

74
00:03:38,560 --> 00:03:40,080
这时候我可以把一部分换出去

75
00:03:40,120 --> 00:03:43,200
从而使得我可用的空间更大

76
00:03:43,240 --> 00:03:44,880
好 把这两条搁到一起之后

77
00:03:44,920 --> 00:03:50,360
实际上就是虚拟存储改进了原来的覆盖和交换

78
00:03:50,400 --> 00:03:52,960
两种技术的往前发展

79
00:03:53,000 --> 00:03:58,040
那到这儿呢 我们就可以实现虚拟存储了

80
00:03:58,080 --> 00:04:00,160
那我们具体说起来呢我们这里

81
00:04:00,200 --> 00:04:02,920
需要什么样的支持技术

82
00:04:02,960 --> 00:04:05,400
硬件需要地址转换

83
00:04:05,440 --> 00:04:07,320
这个地址转换在我们前面讲的

84
00:04:07,360 --> 00:04:10,360
非连续存储里头呢已经说过了

85
00:04:10,400 --> 00:04:11,840
那我们在那基础上就需要

86
00:04:11,880 --> 00:04:14,480
加上一个我如何能够知道它

87
00:04:14,520 --> 00:04:16,480
不在内存里而在外存里头

88
00:04:16,520 --> 00:04:18,920
这是硬件机构要做的事情

89
00:04:18,960 --> 00:04:22,920
而操作系统呢就要来换入换出这件事情

90
00:04:22,960 --> 00:04:26,040
是不能由硬件来做的 要由操作系统来做

91
00:04:26,080 --> 00:04:28,400
到底我哪些装进来

92
00:04:28,440 --> 00:04:31,680
哪些换出去是在你执行指令的过程当中

93
00:04:31,720 --> 00:04:34,920
出现了异常我才来做这件事情

94
00:04:34,960 --> 00:04:39,160
那具体装入的页面或者段是哪一个呢

95
00:04:39,200 --> 00:04:43,120
是由你操作系统里头的监控来实现的

96
00:04:43,160 --> 00:04:45,120
我知道哪些页面的使用情况

97
00:04:45,160 --> 00:04:47,000
从而呢完成这样一点

98
00:04:47,040 --> 00:04:50,800
好 这是我们说到的虚拟存储的基本做法

99
00:04:50,840 --> 00:04:52,920
那后面我们会具体下来介绍说

100
00:04:52,960 --> 00:04:56,040
虚拟页式它在里头到底怎么做的

101
00:04:56,080 --> 00:05:01,320


102
00:05:01,360 --> 00:05:01,920


103
00:05:01,960 --> 00:05:02,360


104
00:05:02,400 --> 00:05:02,440


